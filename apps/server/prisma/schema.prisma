// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email    String  @unique
  googleId String? @unique
  pseudo   String? @unique
  password String

  preferredLocale  String  @default("en")
  active           Boolean @default(false)
  stripeCustomerId String? @unique
  rememberMeToken  String?
  isEmailVerified  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  role     Role      @default(USER)

  profile Profile?
  address Address?

  tokens        Token[]
  notifications Notification[]
  Subscription  Subscription[]
}

enum Role {
  USER
  ADMIN
}

model Token {
  id String @id @default(cuid())

  type  TokenType
  token String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum TokenType {
  ACCESS
  REFRESH
  VERIFY_EMAIL
  PASSWORD_RESET
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  createdAt    DateTime @default(now())

  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Profile {
  id String @id @default(cuid())

  firstName String
  lastName  String
  birthday  DateTime

  avatar  String?
  bio     String?
  website String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique // relation scalar field (used in the `@relation` attribute above)
  user   User   @relation(fields: [userId], references: [id])
}

model Address {
  id   String  @id @default(cuid())
  name String?

  street     String
  city       String
  state      String?
  postalCode String?
  country    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model Subscription {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  priceId String
  price   Price  @relation(fields: [priceId], references: [priceId])

  status SubscriptionStatus @default(ACTIVE)

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Stripe-specific fields
  stripeSubscriptionId String    @unique
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?

  Payment   Payment?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
}

model Payment {
  id String @id @default(cuid())

  subscriptionId String       @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  paymentId String @unique
  amount    Float
  currency  String

  status PaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Product {
  id String @id @default(cuid())

  // Stripe identifiers
  productId String @unique

  // Basic product info
  name        String
  description String?
  active      Boolean @default(true)

  // Product metadata
  images   String[]
  features String[]
  metadata Json?

  // Display and ordering
  sort Int?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  prices        Price[]
  subscriptions Subscription[]

  @@map("products")
}

model Price {
  id String @id @default(cuid())

  // Stripe identifiers
  priceId String @unique

  // Basic price info
  nickname   String?
  active     Boolean @default(true)
  currency   String
  unitAmount Float
  type       String

  // Billing configuration
  billingScheme String?
  taxBehavior   String?

  // Recurring billing configuration
  isUsageBased   Boolean @default(false)
  interval       String?
  intervalCount  Int?
  usageType      String?
  aggregateUsage String?

  // Trial configuration
  trialPeriodDays Int?

  // Metadata
  metadata Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [productId])
  productId String

  subscriptions Subscription[]

  @@map("prices")
}

model Notification {
  id String @id @default(cuid())

  type   NotificationType @default(INFO)
  action ActionLevel      @default(NoUserAction)
  status Status           @default(Queued)

  message String
  read    Boolean @default(false)
  email   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum ActionLevel {
  NoUserAction
  Featured
  UserActionRequired
}

enum Status {
  Sent
  Queued
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}
